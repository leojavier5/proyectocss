/* selector global */
* {
  box-sizing: content-box;
}

body {
  background-color: goldenrod;
}
header {
  background-color: orangered;
  color: blue;
}

.content-content-box > div {
  background-color: green;
  width: 300px;
  margin: 30px;
  border: 10px solid black;
}

#article-1 {
  background-color: goldenrod;
}

#article-2 {
  background-color: gold;
}

#article-3 {
  background-color: goldenrod;
}
#myp {
  color: blue;
}

.myp {
  font-size: 24px;
}

.back {
  background-color: brown;
}

.color-rojo {
  color: red;
  background-color: blue;
}

/* modelo de caja */

.contenedor {
  margin: 50px;
  background-color: violet;
  padding: 3px;
  border: 5px solid red;
  color: green;
}

.contenido {
  background-color: aquamarine;
}

.contenedor-con-imagen {
  width: 400px;
  height: 300px;
  padding: 20px;
  background-color: black;
  background-image: url("/public/colo-colo.jpeg");
  background-size: cover;
  background-position: center;
}
.contenido-con-imagen {
  background-color: gold;
}

/*selector por elemento*/

span {
  font-weight: bold;
}

/*asigna los mismo estilos a elementos con nombre diferente, esta regla afecta a todos los 
elementos con p y span */
p,
span {
  color: blueviolet;
}

/* afecta solo a los elementos <p> que se encuentra dentro de la etiqueta <main>, ya sea contenido 
directo o indirecto */
main p {
  background-color: aquamarine;
}

/* elemento directo hijo  referencia a .contenedor.parrafo (padre)*/

article > .contenedor-parrafo > p {
  font-size: 25px;
}

/* este selector hace referencia a elementos que estan procedido por otros
elementos; ambos deben estar al mismo nivel */

h1 + p {
  color: red;
}

/* estilos mas usados */

/* declara el tipo de letra que se usa para mostrar en un texto. se pueden declarar
multiples valores separados por coma para ofrecer al navegador varias alternativas en vase de que alguna
no se encuentre disponible */

.container {
  border-top: 1px solid black;
  padding: 20px;
  font-family: Georgia, "Times New Roman", Times, serif;
}

.container > .content > p {
  background-color: white;
  color: black;
  font-size: 20px; /* determina el tamaño de la fuente; puede estar incluido en pixeles
  (px) puntos (pt), %, rem, */

  font-weight: 100; /* bold (100 - 1000)*/

  font-style: oblique; /* estilo de letra  (normal, italic,oblique)*/
}

.content > h3 {
  font: bold 30px Arial, sans-serif; /* permite declarar varios atributos al mismo tiempo,
  separados por espacio . 1 grosor, 2 tamaño, 3 familia de fuente */

  text-align: center; /* valores left,right,center,justify*/
  line-height: 5px; /* define el espacio entre lineas*/
}

/* colores */

.mydiv {
  height: 100px;
  width: 100px;
  border: 1px solid black;
  padding: 20px;
  background-color: rgb(255, 380, 100);
}

.div-in-mydiv {
  height: 50px;
  width: 50px;
  border: 1px solid black;
  background-color: rgba(255, 255, 255, 0.9);
}

.div-in-mydiv-2 {
  height: 50px;
  width: 50px;
  border: 1px solid black;
  background-color: #ff0000; /* 0 - 9  y A F */
}

/* tamaños*/

.div-in-mydiv-3 {
  height: 50px;
  width: 50px;
  margin: 20px 0;
  border: 1px solid black;
  background-color: #00ff00; /* 0 -9 y a f */
}

.tamano {
  margin: 100px 20px;
  height: 200px;
  width: 200px;
  background-color: black;
}

.tamano-hijo {
  height: 25%;
  width: 25%;
  background-color: red;
}

.div-vh-vw {
  height: 100vh;
  width: calc(100vw - 40px);
  background-color: blue;
}

.punto {
  height: 100pt;
  width: 100pt;
  background-color: red;
}

.div-rem {
  height: 20rem;
  width: 20rem;
  background-color: green;
}

.div-em {
  height: 10em;
  width: 10em;
  background-color: blue;
}

.contenedor {
  background-color: red;
  width: 500px;
  height: 500px;
}

.contenido {
  background-color: green;
  width: 200px;
  height: 200px;
  max-height: 200px;
  max-width: 200px;
  overflow: auto;
  overflow-y: hidden;
}

._otrocontenido {
  background-color: blue;
  width: 150px;
  height: 150px;
}

.contenido-grande {
  width: 400px;
  height: 400px;
  background-color: chocolate;
}

.contenedor-de-bordes > div {
  height: 100px;
  width: 100px;
  border-width: 5px;
  border-style: dotted;
  border-color: #00ff00;
  border-radius: 50%;
  margin-top: 20px;
}

.borde-1 {
  border-style: dashed !important;
}
.borde-2 {
  border-style: double !important;
}
.borde-3 {
  border-style: outset !important;
}
.borde-4 {
  border-style: solid !important;
}
.borde-en-una-linea {
  border: 1px solid red;
  border-radius: 50px;
  height: 100px;
  width: 100px;
  margin-top: 20px;
}

.flex-container {
  display: flex;
  font-size: 20px;
  border: 1px solid black;
  padding: 10px;
}

.flex-container > div {
  display: flex;
  background-color: #007fff;
  padding: 20px;
}

/*  flex container :afectara no solo a si mismo, afectara a lo que contiene    */

/* 1- flex-direction: define en que direccion se distribuiran los elemento dentro del contenedor  */
/* contenedor 
-column
-column-reverse
-row
-row-reverse
*/

/* 2-flex-wrap: define si los elementos dentro del contenedor puedan salta a la siguiente fila o columna. */

/* fila o columna

- wrap
- nowrap

*/

/* 3 - flex-flow: es una combinacion de las propiedades flex directon y flex-wrap  /*


/* 4- justify-conetnt : para alinear el contenido

-star

-center

-end  

flex-start | flex-end | center | space-between | space-around


*/

/* align- items : se usa para alinear en vertical los elementos dentro del contenedor

-center
- start
-end
-stretch
-baseline

/*

/* align-content para alinear las filas::after

-space-between
-space-arround
-strech
-center
-flex-start
-flex-end
*/

.contenedor-perfecto {
  display: flex;
  background-color: #00ff00;
  height: 200px;
  width: 200px;
  justify-content: center;
  align-items: center;
}

.contenido-perfecto {
  display: flex;
  background-color: black !important;
  height: 100px;
  width: 100px;
  align-items: center;
  justify-content: center;
}

/* selector hijo */

/* comportamiento de elemento hijo dentro de contenedores flex:

order: especifica el roden de los elementos
flex-grow: determina cuanto crece el elemento relativo al resto de elementos que estan dentro
del contenedor flex.

*/

.flex-container-2 > div:nth-child(1) {
  /*order: 3;*/
  flex-grow: 1;
  background-color: #ff0000;
}
.flex-container-2 > div:nth-child(2) {
  /*order: 1;*/
  flex-grow: 1;
  background-color: #007fff;
}
.flex-container-2 > div:nth-child(3) {
  /*order: 2;*/
  flex-grow: 1;
  background-color: aqua;
}

/* flex - shrink */

/* determina cuanto se puede encoger un elemento en relacion a los demas dentro
de un contenedor flex */

.flex-container-3 {
  display: flex;

  align-items: center;

  justify-content: center;

  font-size: 30px;

  border: 1px solid black;

  padding: 10px;
}

.flex-container-3 > div {
  margin: 10px;

  background-color: #ff0000;

  color: #fff;

  padding: 20px;

  width: 100px;

  text-align: center;

  line-height: 70px;
}

.flex-container-3 > div:nth-child(2) {
  flex-shrink: 0;
}

/* flex-basis:
determina una longitud especifica 
*/

.flex-container-3 > div:nth-child(3) {
  flex-basis: 200px;
}

/*     
Display Grid nos permitira disponer elementos en 2 dimenciones a diferencia de flex que nos ayuda a disponer elementos solo en una dimencion .

*/

.container-grid {
  display: grid;
}

.item {
  background-color: cornflowerblue;
  color: white;
  padding: 20px;
  font-size: 20px;
  border: 1px solid black;
}

.grid-columns {
  grid-template-columns: 2fr 400px 1fr;

  /* repeat(3,1fr); // (fr fr fr) repite cantidad   */
}

.grid-rows {
  grid-template-rows: 1fr 1fr 1fr;
}

.grid-rows-columns {
  grid-template-columns: 1fr 1fr 1fr 1fr;
  grid-template-rows: repeat(3, 1fr);
}

.primero {
  grid-column-start: 1; /* donde comienza */
  grid-column-end: 3; /* donde finaliza*/
  /*
  grid-row-start: 1;
  grid-row-end: 3; */
}

.estructura {
  display: grid;
  height: 100vh;
  width: 100vw;

  grid-template-areas:
    "_header _header"
    "_sidelbar _main"
    "_footer _footer";

  grid-template-rows: 80px 1fr 80px;

  grid-template-columns: 300px 1fr;
}

._header {
  grid-area: _header;
  background-color: red;
}

._sidelbar {
  grid-area: _sidelbar;
  background-color: green;
}

._main {
  grid-area: _main;
  background-color: #007fff;
}
._footer {
  grid-area: _footer;
  background-color: aqua;
}

.responsivo {
  display: grid;
  grid-template-columns: repeat(3, minmax(100px, 200px));
  grid-template-rows: repeat(1, minmax(100px, 200px));
  border: 1px solid #007fff;
  padding: 15px;
  gap: 15px;
}

.responsivo > div {
  background-color: blue;
  color: #fff;
  padding: 30px;
  margin: 15px;
}

/* Intro JS */

.introjs {
  display: grid;
  grid-template-rows: 70px 1fr 70px;
  grid-template-areas:
    "header_"
    "main_" "footer_";
  min-height: 100vh;
  margin: 0;
}

.header_ {
  grid-area: header_;
  background-color: #333;
  color: #fff;
  padding: 20px;
}
.header_ h1 {
  grid-area: header_;
  background-color: #333;
  color: #fff;
  padding: 20px;
}

.main_ {
  grid-area: main_;
  display: grid;
  grid-template-columns: 1fr 200px;
  gap: 20px;
  padding: 20px;
  background-color: #ff0000;
}

.card {
  display: flex;

  flex-direction: column;

  margin: 50px auto;

  max-width: 300px;

  padding: 20px;

  border-radius: 5px;

  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3);
}

.card > input [type="number"],
.card > input[type="text"] {
  width: calc(100% - 20px);
  padding: 10px;
  margin: 20px;
  border: 1 px solid #ccc;
  border-radius: 3px;
}

.card > button {
  margin: 20px auto 0px;
  width: 90%;
  padding: 10px;
  background-color: #007fff;
  color: #fff;
  border: none;
  border-radius: 3px;
  cursor: pointer;
}

.containerjs {
  border-right: 1px solid #ddd;
}

.footer_ {
  grid-area: footer_;
  background-color: #333;
  color: #fff;
  padding: 10px;
}

.footer_ p {
  grid-area: footer_;
  background-color: #333;
  color: #fff;
  padding: 10px;
}
